import random
import telebot

# Initialize the Telegram Bot
bot = telebot.TeleBot('5984714799:AAEicU3PBK3VvQmaTIfk46eanuBZU0WUOvc')

# List of suits
suits = ['Hearts', 'Tiles', 'Pikes', 'Clovers']

# List of ranks
ranks = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten',
         'Jack', 'Queen', 'King', 'Ace']

# Dictionary mapping ranks to values
values = {'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8, 'Nine': 9, 'Ten': 10,
          'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 11}

playing = False


class Card:
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return self.rank + ' of ' + self.suit


class Deck:
    def __init__(self):
        self.deck = []  # Empty at the beginning
        for suit in suits:  # make a deck of card
            for rank in ranks:
                self.deck.append(Card(suit, rank))

    def shuffle(self):
        random.shuffle(self.deck)

    def deal(self):
        single_card = self.deck.pop()
        return single_card

    def __str__(self):
        deck_comp = ''  # start with an empty string
        for card in self.deck:
            deck_comp += '\n ' + card.__str__()  # add each Card object's print string
        return 'The deck has:' + deck_comp


class Hand:
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0  # start with zero value because there is no cards
        self.aces = 0  # add an attribute to keep track of aces

    def add_card(self, card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == 'Ace':
            self.aces += 1

    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value -= 10
            self.aces -= 1


class Balance:
    def __init__(self, total=1000):
        self.total = total  # This can be set to a default value or supplied by a user input
        self.bet = 0

    def win_bet(self):
        self.total += self.bet

    def lose_bet(self):
        self.total -= self.bet


def take_bet(balance):
    msg = bot.send_message(chat_id, 'How many balance would you like to bet?')
    bot.register_next_step_handler(msg, process_bet, balance)


def process_bet(message, balance):
    try:
        bet = int(message.text)
        if bet <= balance.total:
            balance.bet = bet
            deal_cards()
        else:
            msg = bot.send_message(chat_id, "Sorry, your bet can't exceed your total balance of " + str(balance.total))
            bot.register_next_step_handler(msg, process_bet, balance)
    except ValueError:
        msg = bot.send_message(chat_id, 'Sorry, a bet must be an integer!')
        bot.register_next_step_handler(msg, process_bet, balance)


def deal_cards():
    # Create & shuffle the deck, deal two cards to each player
    deck = Deck()
    deck.shuffle()

    player_hand = Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())

    dealer_hand = Hand()
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())

    # Show cards (but keep one dealer card hidden)
    show_some(player_hand, dealer_hand)


def hit_or_stand():
    msg = bot.send_message(chat_id, "Would you like to Hit or Stand? Enter 'h' or 's'")
    bot.register_next_step_handler(msg, process_hit_or_stand)


def process_hit_or_stand(message):
    global playing

    if message.text.lower() == 'h':
        hit(player_hand)
        show_some(player_hand, dealer_hand)
        if player_hand.value > 21:
            player_busts()
            playing = False
            end_game()
        else:
            hit_or_stand()
    elif message.text.lower() == 's':
        print("Player stands. Dealer is playing.")
        playing = False
        dealer_play()
    else:
        msg = bot.send_message(chat_id, "Sorry, please try again.")
        bot.register_next_step_handler(msg, process_hit_or_stand)


def hit(hand):
    hand.add_card(deck.deal())
    hand.adjust_for_ace()


def show_some(player, dealer):
    msg = "\nDealer's Hand:\n"
    msg += " <card hidden>\n"
    msg += dealer.cards[1].__str__() + "\n"
    msg += "\nPlayer's Hand:\n"
    for card in player.cards:
        msg += card.__str__() + "\n"
    bot.send_message(chat_id, msg)


def show_all(player, dealer):
    msg = "\nDealer's Hand:\n"
    for card in dealer.cards:
        msg += card.__str__() + "\n"
    msg += "Dealer's Hand = " + str(dealer.value) + "\n"
    msg += "\nPlayer's Hand:\n"
    for card in player.cards:
        msg += card.__str__() + "\n"
    msg += "Player's Hand = " + str(player.value) + "\n"
    bot.send_message(chat_id, msg)


def player_busts():
    bot.send_message(chat_id, "Player busts!")


def player_wins():
    bot.send_message(chat_id, "Player wins!")


def dealer_busts():
    bot.send_message(chat_id, "Dealer busts!")


def dealer_wins():
    bot.send_message(chat_id, "Dealer wins!")


def push():
    bot.send_message(chat_id, "Dealer and Player tie! It's a push.")


def dealer_play():
    while dealer_hand.value < 17:
        hit(dealer_hand)
    show_all(player_hand, dealer_hand)
    determine_winner()


def determine_winner():
    if dealer_hand.value > 21:
        dealer_busts()
        player_balance.win_bet()
    elif dealer_hand.value > player_hand.value:
        dealer_wins()
        player_balance.lose_bet()
    elif dealer_hand.value < player_hand.value:
        player_wins()
        player_balance.win_bet()
    else:
        push()
    end_game()


def end_game():
    bot.send_message(chat_id, "\nPlayer's winnings stand at " + str(player_balance.total))

    keyboard = telebot.types.ReplyKeyboardMarkup(True, False)
    keyboard.row('/start', '/quit')
    msg = bot.send_message(chat_id, "Would you like to play another hand?", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_restart)


def process_restart(message):
    if message.text.lower() == '/start':
        start_game()
    elif message.text.lower() == '/quit':
        bot.send_message(chat_id, "Thanks for playing!")
    else:
        msg = bot.send_message(chat_id, "Invalid choice. Would you like to play another hand?")
        bot.register_next_step_handler(msg, process_restart)


@bot.message_handler(commands=['start'])
def start_game(message):
    global chat_id, player_balance, playing, player_hand, dealer_hand, deck
    chat_id = message.chat.id
    playing = True
    player_balance = Balance()
    bot.send_message(chat_id, 'Welcome to BlackJack!\n'
                              'Get as close to 21 as you can without going over!\n'
                              'Dealer hits until she reaches 17. Aces count as 1 or 11.')
    take_bet(player_balance)


@bot.message_handler(func=lambda message: True)
def handle_all_other_messages(message):
    bot.reply_to(message, "Invalid command. Type '/start' to start the game.")


# Start the Telegram Bot
bot.polling()
